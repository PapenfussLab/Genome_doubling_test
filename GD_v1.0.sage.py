
# This file was *autogenerated* from the file GD_v1.0.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)# a simple program that is reliant on caching to reduce memory consumption and dynamic programming to reduce computational time.

import sys
print sys.argv

N=int(sys.argv[_sage_const_1 ])
M=int(sys.argv[_sage_const_2 ])
if sys.argv[_sage_const_3 ] == 'True':
  balanced = True
elif sys.argv[_sage_const_3 ] == 'False':
  balanced = False
else:
  print "ERROR"
  sys.exit()

if sys.argv[_sage_const_4 ] == 'True':
  forced_alive = True
elif sys.argv[_sage_const_4 ] == 'False':
  forced_alive = False
else:
  print("ERROR")
  sys.exit()

import sage.libs.ecl
sage.libs.ecl.ecl_eval("(ext:set-limit 'ext:heap-size 0)")

if balanced:
  var('s,a')
  def f(s): return a +(_sage_const_1 -_sage_const_2 *a)*s+a*s**_sage_const_2  # the recursive generating function

if not balanced:
  var('s,a,b,c')
  def f(s): return a+b*s+c*s**_sage_const_2  # the recursive generating function

prefix = "/Users/lmcintosh/GD/GFS/B"+str(balanced)+"_FA"+str(forced_alive)+"_"
suffix = "_12_dec"
filename_output = prefix+"N"+str(N)+"_M"+str(M)+suffix

if not os.path.isfile(filename_output):
  if N == _sage_const_0  and M == -_sage_const_1 :
    expr = s
    save(expr,filename_output)
  else:
    # load the preceding solution (do this dynamically to minimise memory consuption as it is the limiting factor)
    if M == -_sage_const_1 :
      filename_input = prefix+"N"+str(N-_sage_const_1 )+"_M"+str(M)+suffix
    else:
      filename_input = prefix+"N"+str(N)+"_M"+str(M-_sage_const_1 )+suffix
    GFS = load(filename_input)

    if M == _sage_const_0 :
      # then double the genome
      expr = GFS.substitute(s==s**_sage_const_2 )
    else:
      expr = GFS.substitute(s == f(s)) 
      if forced_alive:
        expr = expr + GFS.substitute(s == _sage_const_0 )*(s-_sage_const_1 )

    save(expr,filename_output)
else:
  expr = load(filename_output)

x=expr.coefficients(s)
for j in range(len(x)):
  prefix="/Users/lmcintosh/GD/terms/B"+str(balanced)+"_FA"+str(forced_alive)+"_"+"N"+str(N)+"_M"+str(M)+"/"
  if not os.path.exists(prefix):
    os.makedirs(prefix)
  filename = prefix+"c"+str(x[j][_sage_const_1 ]) + suffix
  output = open(filename,'w')
  output.write(str(x[j][_sage_const_0 ]))
  output.close()

